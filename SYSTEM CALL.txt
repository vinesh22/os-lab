1.Write() System call:
#include <stdio.h>
#include<unistd.h>
int main()
{
 write(1,"hello",5);
 write(1,"\nhello\n",2); // writes 2 positions only
 printf("\n write system call");
 return 0;
}


write system call
2.read() System call
#include<stdio.h>
#include<unistd.h>
int main()
{
 char b[30];
 read(0,b,10);
 write(1,b,5); // write(1,b,10)
 return 0;
}


3.create() System call
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<unistd.h>
#include<fcntl.h>
int main()
{
int file_1;
printf("this will create a file");
file_1=creat("abc.txt",S_IREAD);
return 0;
}


(#include<sys/types.h> This header contains a number of basic derived types that should be 
used whenever appropriate. For ex: size,time,device number etcâ€¦)
4.open() System call
#include<stdio.h>
#include<fcntl.h>
#include<errno.h>
int main()
{
int fd=open("abc.txt",O_RDONLY); // name of the file which we created
printf("fd=%d",fd);
if(fd==-1)
{
printf("error numbe: %d",errno); // prints error number
perror("Program"); // lable
}
return 0;
}


6.fcntl() System call
#include <stdio.h>
#include <fcntl.h>
int main(void){
printf("duplicate an existing file descriptor (F_DUPFD) %d\n", F_DUPFD);
printf("get file descriptor flags (F_GETFD) %d\n", F_GETFD);
printf("set file descriptor flags (F_SETFD) %d\n", F_SETFD);
printf("get file status flags (F_GETFL) %d\n", F_GETFL);
printf("set file status flags (F_SETFL) %d\n", F_SETFL);
printf("get record locks (F_GETLK) %d\n", F_GETLK);
printf("set record locks (F_SETLK) %d\n", F_SETLK);
printf("get asynchronous I/O ownership (F_GETOWN) %d\n", F_GETOWN);
printf("set asynchronous I/O ownership (F_SETOWN) %d\n", F_SETOWN);
return 0;
}


7.fork system call
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
int main()
{
fork();
fork();
fork();
printf("hello students pid=%d \n",getpid());
return 0;
}


8.opendir() and readdir() System call:
#include <stdio.h>
#include <dirent.h>
 
int main(void)
{
 struct dirent *de; 
 
 
 DIR *dr = opendir(".");
 
 if (dr == NULL) 
 {
 printf("Could not open current directory" );
 return 0;
 }
 
